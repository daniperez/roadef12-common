# The MIT License
#
# Copyright (c) 2011 daniperez
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

# ###################################################################
# -------------------------------------------------------------------
# Roadef12 Common Finder
# -------------------------------------------------------------------
#
# Dependencies are looked up and roadef12-common_INCLUDE_DIRS variable
# pointing to the folder containting the headers is set.
# roadef12-common_FOUND is set to true if the finder succeeded.
# roadef12-common_DATA will point to the folder with the data instances.
# roadef12-checker target is also defined (executable of the checker)..
# 
# We also define solve_all_instances macro, easing the task of testing 
# the data instances against your code.
#
# ###################################################################

# -------------------------------------------------------------------
# solve_all_instances 
# -------------------------------------------------------------------
#
# solve_all_instances - Adds test suites for every ROADEF instances. 
#
#  solve_instance ( TARGET DATA_FOLDER ) 
#
# TARGET is the executable to execute (your application). DATA_FOLDER is
# the root folder containing the instances (i.e. the folder containing
# data_example and data_a1 folders for example).
##
macro ( solve_all_instances TARGET DATA_FOLDER )

# i) Example instance
    solve_instance (
      "${TARGET}"
      "example" # You can do 'make example' to solve the example instance
      "${DATA_FOLDER}/data_example/model_example.txt"
      "${DATA_FOLDER}/data_example/initial_solution_example.txt"
      "${DATA_FOLDER}/data_example/initial_solution_example.txt"
      "-u" )

# ii) A1 instances
    foreach ( i RANGE 1 5 )
      solve_instance (
        "${TARGET}"
        "a1-${i}" # You can do 'make a1-[1-4]' to solve a single A1 instance 
        "${DATA_FOLDER}/data_a1/model_a1_${i}.txt"
        "${DATA_FOLDER}/data_a1/assignment_a1_${i}.txt"
        "${CMAKE_BINARY_DIR}/solution_a1_${i}.txt"
        "" )
    endforeach ()

endmacro()

# -------------------------------------------------------------------
# solve_instance 
# -------------------------------------------------------------------
#
# solve_instance - Solves an instance and checks the solution. 
#
#  solve_instance ( TARGET NAME MODEL INITIAL_SOLUTION SOLUTION CMD_ARGS ) 
#
# TARGET is the executable to execute (your application). NAME is the name of
# the instance to solve. MODEL is the parameters of the problem as per ROADEF's
# specs. INITIAL_SOLUTION is the initial feasible solution. SOLUTION is the
# output file to write. Finally, CMD_ARGS are other arguments to append to
# TARGET call.
#
macro ( solve_instance TARGET NAME MODEL INITIAL_SOLUTION SOLUTION CMD_ARGS )

    add_test ( NAME "testsuite-${NAME}-solution" 
               COMMAND "$<TARGET_FILE:${TARGET}>"
                       "-p" "${MODEL}"
                       "-i" "${INITIAL_SOLUTION}"
                       "-o" "${SOLUTION}"
                       "${CMD_ARGS}" )

    add_test ( NAME "testsuite-${NAME}-solution-check" 
               COMMAND "$<TARGET_FILE:roadef12-checker>"
                       "${MODEL}"
                       "${INITIAL_SOLUTION}"
                       "${SOLUTION}" )
    
    # ${NAME} target writes log messages whereas "check" doesn't
    # (only in case of failure)
    add_custom_target (
               "${NAME}"
               COMMAND ${CMAKE_CTEST_COMMAND}
                       -V
                       -R "testsuite-${NAME}-solution"
                       -E "testsuite-${NAME}-solution-check"
               DEPENDS ${TARGET} roadef12-checker )

endmacro ()

# -------------------------------------------------------------------
# MAIN
# -------------------------------------------------------------------

# OPTIONAL used here because include won't find a package with such a name
# when compiling example/ folder in roadef12-common's source tree.
get_filename_component(SELF_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
include( ${SELF_DIR}/roadef12-checker.cmake OPTIONAL )

find_package ( Boost 1.44.0
               COMPONENTS program_options unit_test_framework )

if ( Boost_FOUND)

    include_directories ( ${Boost_INCLUDE_DIRS} )

    enable_testing() 

    find_path ( roadef12-common_INCLUDE_DIRS "roadef12-common/service/Service.hpp"
                PATHS "${CMAKE_SOURCE_DIR}" )

    find_path ( roadef12-common_DATA "data_example/initial_solution_example.txt"
                PATHS
                  "${CMAKE_SOURCE_DIR}/roadef12-material/data/"
                  "/usr/share/roadef12-common/material/data/"
                  "@CMAKE_INSTALL_PREFIX@/share/roadef12-common/material/data/"
                DOC "Data instances" )

    find_package_handle_standard_args ( roadef12-common DEFAULT_MSG
                                        roadef12-common_INCLUDE_DIRS
                                        roadef12-common_DATA )

    mark_as_advanced ( roadef12-common_INCLUDE_DIRS )
    mark_as_advanced ( roadef12-common_DATA )

    set ( roadef12-common_FOUND true )

endif ()


if ( roadef12-common_FOUND )
  message ( STATUS "roadef12-common found" )
  message ( STATUS "  + data: ${roadef12-common_DATA}" )
  message ( STATUS "  +  inc: ${roadef12-common_INCLUDE_DIRS}" )
endif ()
